import React, { useState, useEffect } from 'react';
import {
  Box,
  Card,
  CardContent,
  Typography,
  List,
  ListItem,
  ListItemAvatar,
  ListItemText,
  ListItemSecondaryAction,
  Avatar,
  IconButton,
  Chip,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  TextField,
  Alert,
  Divider,
  Menu,
  MenuItem,
  Fab,
  Tooltip,
} from '@mui/material';
import {
  Star,
  StarBorder,
  Add,
  Delete,
  Edit,
  MoreVert,
  TrendingUp,
  TrendingDown,
  ShowChart,
  PlaylistAdd,
  Visibility,
} from '@mui/icons-material';
import SymbolSearch from './SymbolSearch';

interface Instrument {
  id: string;
  tradingsymbol: string;
  name: string;
  last_price?: number;
  exchange: string;
  industry_group?: string;
  market_segment?: string;
  is_f_and_o: boolean;
}

interface WatchlistItem {
  id: string;
  instrument: Instrument;
  notes?: string;
  price_alert_high?: number;
  price_alert_low?: number;
  added_at: string;
}

interface Watchlist {
  id: string;
  name: string;
  description?: string;
  is_default: boolean;
  items_count: number;
  created_at: string;
}

interface WatchlistManagerProps {
  isHomePage?: boolean;
  onInstrumentSelect?: (instrument: Instrument) => void;
  maxHeight?: number;
}

const WatchlistManager: React.FC<WatchlistManagerProps> = ({
  isHomePage = false,
  onInstrumentSelect,
  maxHeight = 600,
}) => {
  const [watchlists, setWatchlists] = useState<Watchlist[]>([]);
  const [selectedWatchlist, setSelectedWatchlist] = useState<string | null>(null);
  const [watchlistItems, setWatchlistItems] = useState<WatchlistItem[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  // Dialog states
  const [createDialogOpen, setCreateDialogOpen] = useState(false);
  const [addSymbolDialogOpen, setAddSymbolDialogOpen] = useState(false);
  const [newWatchlistName, setNewWatchlistName] = useState('');
  const [newWatchlistDescription, setNewWatchlistDescription] = useState('');
  const [selectedInstrument, setSelectedInstrument] = useState<Instrument | null>(null);
  const [symbolNotes, setSymbolNotes] = useState('');

  // Menu state
  const [menuAnchorEl, setMenuAnchorEl] = useState<null | HTMLElement>(null);
  const [menuItemId, setMenuItemId] = useState<string | null>(null);

  // Load watchlists on component mount
  useEffect(() => {
    loadWatchlists();
  }, []);

  // Load watchlist items when selected watchlist changes
  useEffect(() => {
    if (selectedWatchlist) {
      loadWatchlistItems(selectedWatchlist);
    }
  }, [selectedWatchlist]);

  const loadWatchlists = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/v1/instruments/watchlists');
      
      if (response.ok) {
        const watchlistsData = await response.json();
        setWatchlists(watchlistsData);
        
        // Select default watchlist or first one
        const defaultWatchlist = watchlistsData.find((wl: Watchlist) => wl.is_default);
        const selectedId = defaultWatchlist?.id || watchlistsData[0]?.id;
        if (selectedId) {
          setSelectedWatchlist(selectedId);
        }
        
        setError(null);
      } else {
        setError('Failed to load watchlists');
      }
    } catch (err) {
      setError('Error loading watchlists');
      console.error('Watchlists error:', err);
    } finally {
      setLoading(false);
    }
  };

  const loadWatchlistItems = async (watchlistId: string) => {
    try {
      const response = await fetch(`/api/v1/instruments/watchlists/${watchlistId}/items`);
      
      if (response.ok) {
        const items = await response.json();
        setWatchlistItems(items);
      } else {
        console.error('Failed to load watchlist items');
        setWatchlistItems([]);
      }
    } catch (err) {
      console.error('Watchlist items error:', err);
      setWatchlistItems([]);
    }
  };

  const createWatchlist = async () => {
    if (!newWatchlistName.trim()) return;

    try {
      const response = await fetch('/api/v1/instruments/watchlists', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          name: newWatchlistName,
          description: newWatchlistDescription,
          is_default: watchlists.length === 0, // First watchlist is default
        }),
      });

      if (response.ok) {
        const newWatchlist = await response.json();
        setWatchlists([...watchlists, newWatchlist]);
        setSelectedWatchlist(newWatchlist.id);
        setCreateDialogOpen(false);
        setNewWatchlistName('');
        setNewWatchlistDescription('');
      } else {
        setError('Failed to create watchlist');
      }
    } catch (err) {
      setError('Error creating watchlist');
      console.error('Create watchlist error:', err);
    }
  };

  const addToWatchlist = async (instrument: Instrument) => {
    if (!selectedWatchlist) return;

    try {
      const response = await fetch(`/api/v1/instruments/watchlists/${selectedWatchlist}/items`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          instrument_id: instrument.id,
          notes: symbolNotes,
        }),
      });

      if (response.ok) {
        // Reload watchlist items
        loadWatchlistItems(selectedWatchlist);
        setAddSymbolDialogOpen(false);
        setSelectedInstrument(null);
        setSymbolNotes('');
      } else {
        const errorData = await response.json();
        setError(errorData.detail || 'Failed to add instrument');
      }
    } catch (err) {
      setError('Error adding instrument');
      console.error('Add instrument error:', err);
    }
  };

  const handleInstrumentClick = (instrument: Instrument) => {
    if (onInstrumentSelect) {
      onInstrumentSelect(instrument);
    }
  };

  const handleMenuOpen = (event: React.MouseEvent<HTMLElement>, itemId: string) => {
    setMenuAnchorEl(event.currentTarget);
    setMenuItemId(itemId);
  };

  const handleMenuClose = () => {
    setMenuAnchorEl(null);
    setMenuItemId(null);
  };

  const getIndustryColor = (industry?: string) => {
    const colors: Record<string, string> = {
      'IT': '#2196F3',
      'BANKING': '#4CAF50',
      'PHARMA': '#FF9800',
      'FMCG': '#9C27B0',
      'AUTO': '#F44336',
      'METALS': '#795548',
    };
    return colors[industry || ''] || '#757575';
  };

  const formatPrice = (price?: number) => {
    if (!price) return 'N/A';
    return `â‚¹${price.toLocaleString('en-IN')}`;
  };

  if (loading) {
    return (
      <Card>
        <CardContent>
          <Typography>Loading watchlists...</Typography>
        </CardContent>
      </Card>
    );
  }

  const currentWatchlist = watchlists.find(wl => wl.id === selectedWatchlist);

  return (
    <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
      {/* Header */}
      <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'space-between', mb: 2 }}>
        <Typography variant={isHomePage ? 'h5' : 'h6'} component="h2">
          {isHomePage ? 'ðŸ“‹ My Watchlists' : 'Watchlists'}
        </Typography>
        
        <Box sx={{ display: 'flex', gap: 1 }}>
          <Button
            variant="outlined"
            size="small"
            startIcon={<Add />}
            onClick={() => setAddSymbolDialogOpen(true)}
            disabled={!selectedWatchlist}
          >
            Add Symbol
          </Button>
          <Button
            variant="outlined"
            size="small"
            startIcon={<PlaylistAdd />}
            onClick={() => setCreateDialogOpen(true)}
          >
            New List
          </Button>
        </Box>
      </Box>

      {error && (
        <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError(null)}>
          {error}
        </Alert>
      )}

      {/* Watchlist Tabs */}
      {watchlists.length > 0 && (
        <Box sx={{ display: 'flex', gap: 1, mb: 2, flexWrap: 'wrap' }}>
          {watchlists.map((watchlist) => (
            <Chip
              key={watchlist.id}
              label={`${watchlist.name} (${watchlist.items_count})`}
              variant={selectedWatchlist === watchlist.id ? 'filled' : 'outlined'}
              color={selectedWatchlist === watchlist.id ? 'primary' : 'default'}
              onClick={() => setSelectedWatchlist(watchlist.id)}
              icon={watchlist.is_default ? <Star /> : undefined}
              size="small"
            />
          ))}
        </Box>
      )}

      {/* Watchlist Items */}
      <Card sx={{ flexGrow: 1, display: 'flex', flexDirection: 'column' }}>
        <CardContent sx={{ flexGrow: 1, p: 0 }}>
          {currentWatchlist && (
            <Box sx={{ p: 2, pb: 1 }}>
              <Typography variant="subtitle1">{currentWatchlist.name}</Typography>
              {currentWatchlist.description && (
                <Typography variant="body2" color="text.secondary">
                  {currentWatchlist.description}
                </Typography>
              )}
            </Box>
          )}
          
          <Divider />
          
          <List 
            sx={{ 
              flexGrow: 1, 
              overflow: 'auto', 
              maxHeight: maxHeight - 200,
              p: 0
            }}
          >
            {watchlistItems.length === 0 ? (
              <ListItem>
                <ListItemText
                  primary="No instruments in this watchlist"
                  secondary="Add some stocks to get started"
                />
              </ListItem>
            ) : (
              watchlistItems.map((item) => (
                <ListItem
                  key={item.id}
                  button
                  onClick={() => handleInstrumentClick(item.instrument)}
                  sx={{
                    '&:hover': {
                      backgroundColor: 'action.hover',
                    },
                  }}
                >
                  <ListItemAvatar>
                    <Avatar
                      sx={{
                        bgcolor: getIndustryColor(item.instrument.industry_group),
                        width: 40,
                        height: 40,
                      }}
                    >
                      {item.instrument.tradingsymbol.slice(0, 2)}
                    </Avatar>
                  </ListItemAvatar>
                  
                  <ListItemText
                    primary={
                      <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
                        <Typography variant="subtitle2">
                          {item.instrument.tradingsymbol}
                        </Typography>
                        {item.instrument.is_f_and_o && (
                          <Chip label="F&O" size="small" variant="outlined" />
                        )}
                      </Box>
                    }
                    secondary={
                      <Box>
                        <Typography variant="body2" color="text.secondary" noWrap>
                          {item.instrument.name}
                        </Typography>
                        <Typography variant="caption" color="primary">
                          {formatPrice(item.instrument.last_price)}
                        </Typography>
                      </Box>
                    }
                  />
                  
                  <ListItemSecondaryAction>
                    <IconButton
                      edge="end"
                      onClick={(e) => {
                        e.stopPropagation();
                        handleMenuOpen(e, item.id);
                      }}
                    >
                      <MoreVert />
                    </IconButton>
                  </ListItemSecondaryAction>
                </ListItem>
              ))
            )}
          </List>
        </CardContent>
      </Card>

      {/* Create Watchlist Dialog */}
      <Dialog open={createDialogOpen} onClose={() => setCreateDialogOpen(false)} maxWidth="sm" fullWidth>
        <DialogTitle>Create New Watchlist</DialogTitle>
        <DialogContent>
          <TextField
            autoFocus
            margin="dense"
            label="Watchlist Name"
            fullWidth
            variant="outlined"
            value={newWatchlistName}
            onChange={(e) => setNewWatchlistName(e.target.value)}
            sx={{ mb: 2 }}
          />
          <TextField
            margin="dense"
            label="Description (Optional)"
            fullWidth
            multiline
            rows={3}
            variant="outlined"
            value={newWatchlistDescription}
            onChange={(e) => setNewWatchlistDescription(e.target.value)}
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setCreateDialogOpen(false)}>Cancel</Button>
          <Button variant="contained" onClick={createWatchlist} disabled={!newWatchlistName.trim()}>
            Create
          </Button>
        </DialogActions>
      </Dialog>

      {/* Add Symbol Dialog */}
      <Dialog open={addSymbolDialogOpen} onClose={() => setAddSymbolDialogOpen(false)} maxWidth="md" fullWidth>
        <DialogTitle>Add Symbol to Watchlist</DialogTitle>
        <DialogContent>
          <Box sx={{ mb: 3 }}>
            <SymbolSearch
              onInstrumentSelect={setSelectedInstrument}
              selectedInstrument={selectedInstrument}
              placeholder="Search for stocks, indices, or futures..."
              autoFocus
            />
          </Box>
          
          {selectedInstrument && (
            <Box sx={{ mb: 2, p: 2, bgcolor: 'grey.50', borderRadius: 1 }}>
              <Typography variant="subtitle2">Selected: {selectedInstrument.tradingsymbol}</Typography>
              <Typography variant="body2" color="text.secondary">{selectedInstrument.name}</Typography>
            </Box>
          )}
          
          <TextField
            label="Notes (Optional)"
            fullWidth
            multiline
            rows={3}
            variant="outlined"
            value={symbolNotes}
            onChange={(e) => setSymbolNotes(e.target.value)}
            placeholder="Add your notes about this stock..."
          />
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setAddSymbolDialogOpen(false)}>Cancel</Button>
          <Button 
            variant="contained" 
            onClick={() => selectedInstrument && addToWatchlist(selectedInstrument)}
            disabled={!selectedInstrument}
          >
            Add to Watchlist
          </Button>
        </DialogActions>
      </Dialog>

      {/* Context Menu */}
      <Menu
        anchorEl={menuAnchorEl}
        open={Boolean(menuAnchorEl)}
        onClose={handleMenuClose}
      >
        <MenuItem onClick={handleMenuClose}>
          <Edit sx={{ mr: 1 }} /> Edit Notes
        </MenuItem>
        <MenuItem onClick={handleMenuClose}>
          <Visibility sx={{ mr: 1 }} /> View Details
        </MenuItem>
        <MenuItem onClick={handleMenuClose} sx={{ color: 'error.main' }}>
          <Delete sx={{ mr: 1 }} /> Remove
        </MenuItem>
      </Menu>
    </Box>
  );
};

export default WatchlistManager;
